name: Tag & Build Tauri Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
  workflow_dispatch:

jobs:
  build-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-20.04, windows-latest]

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Add WebAssembly target (wasm32-unknown-unknown)
        run: rustup target add wasm32-unknown-unknown

      - name: Install Trunk (for Yew build)
        run: cargo install trunk

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf

      # Build & create the GitHub Release for this tag; uploads Tauri's default artifacts
      - name: Build & publish release (macOS/Windows/Linux)
        uses: tauri-apps/tauri-action@v0.4.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }}            # e.g. v0.0.3
          releaseName: 'App v__VERSION__'            # __VERSION__ comes from tauri.conf.json
          releaseDraft: false
          prerelease: false

      # Read version to produce friendly, platform-tagged filenames
      - name: Extract app version
        id: ver
        shell: bash
        run: |
          v=$(python - <<'PY'
          import json
          print(json.load(open("src-tauri/tauri.conf.json"))["version"])
          PY
          )
          echo "version=$v" >> $GITHUB_OUTPUT
          echo "Using version: $v"

      # Copy primary artifact to a friendly, platform-tagged name and attach to the same release
      - name: Rename artifact and upload friendly-named copy
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          ROOT="src-tauri/target/release/bundle"
          VER="${{ steps.ver.outputs.version }}"
          case "${{ matrix.platform }}" in
            macos-latest)
              LABEL="macOS"
              SRC=$(ls "$ROOT"/dmg/*.dmg 2>/dev/null | head -n1 || true)
              ;;
            windows-latest)
              LABEL="Windows"
              for f in "$ROOT"/msi/*.msi "$ROOT"/nsis/*.exe "$ROOT"/*/*.exe "$ROOT"/*/*.zip; do
                [ -e "$f" ] && SRC="$f" && break
              done
              ;;
            ubuntu-20.04)
              LABEL="Linux"
              for f in "$ROOT"/appimage/*.AppImage "$ROOT"/deb/*.deb "$ROOT"/rpm/*.rpm "$ROOT"/*/*.tar.gz; do
                [ -e "$f" ] && SRC="$f" && break
              done
              ;;
          esac

          if [ -z "${SRC:-}" ]; then
            echo "No bundle found on $LABEL; nothing to upload."
            exit 0
          fi

          EXT="${SRC##*.}"
          NEW="ClipScraperApp_${LABEL}_${VER}.${EXT}"
          cp -f "$SRC" "$NEW"
          echo "Uploading $NEW (from $SRC) to release ${{ github.ref_name }}"
          gh release upload "${{ github.ref_name }}" "$NEW" --clobber
