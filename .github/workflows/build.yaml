name: PR Build - Tauri

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-20.04, windows-latest]

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Add WebAssembly target (wasm32-unknown-unknown)
        run: rustup target add wasm32-unknown-unknown

      - name: Install Trunk (for Yew build)
        run: cargo install trunk

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            xz-utils \
            unzip

      # ---------- Prepare sidecar binaries (yt-dlp, ffmpeg/ffprobe, gallery-dl) ----------
      - name: Determine target triple
        id: triple
        shell: bash
        run: echo "triple=$(rustc -vV | sed -n 's/^host: //p')" >> $GITHUB_OUTPUT

      - name: Setup Python for gallery-dl build
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Build gallery-dl onefile (all OS)
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install gallery-dl pyinstaller
          MAIN=$(python - <<'PY'
          import gallery_dl, inspect, os
          print(os.path.join(os.path.dirname(gallery_dl.__file__), "__main__.py"))
          PY
          )
          pyinstaller -F -n gallery-dl "$MAIN"

      - name: Prepare sidecars (macOS/Linux)
        if: matrix.platform != 'windows-latest'
        shell: bash
        run: |
          set -euo pipefail
          TRIPLE='${{ steps.triple.outputs.triple }}'
          mkdir -p src-tauri/binaries src-tauri/resources

          # yt-dlp
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp_macos -o yt-dlp
          else
            curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o yt-dlp
          fi
          chmod +x yt-dlp
          mv yt-dlp "src-tauri/binaries/yt-dlp-${TRIPLE}"

          # ffmpeg/ffprobe
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            curl -L -o ffmpeg.tar.xz https://github.com/yt-dlp/FFmpeg-Builds/releases/latest/download/ffmpeg-master-latest-linux64-gpl.tar.xz
            tar -xf ffmpeg.tar.xz
            FDIR=$(find . -maxdepth 1 -type d -name 'ffmpeg-*linux64-gpl' | head -n1)
            cp "$FDIR/bin/ffmpeg" "src-tauri/binaries/ffmpeg-${TRIPLE}"
            cp "$FDIR/bin/ffprobe" "src-tauri/binaries/ffprobe-${TRIPLE}"
            chmod +x "src-tauri/binaries/ffmpeg-${TRIPLE}" "src-tauri/binaries/ffprobe-${TRIPLE}"
            # Unsuffixed copies so yt-dlp auto-detects without flags
            cp "$FDIR/bin/ffmpeg" src-tauri/resources/ffmpeg
            cp "$FDIR/bin/ffprobe" src-tauri/resources/ffprobe
            chmod +x src-tauri/resources/ffmpeg src-tauri/resources/ffprobe
          else
            # macOS (Apple Silicon on macos-latest). Uses Homebrew ffmpeg.
            brew install ffmpeg
            cp /opt/homebrew/bin/ffmpeg "src-tauri/binaries/ffmpeg-${TRIPLE}"
            cp /opt/homebrew/bin/ffprobe "src-tauri/binaries/ffprobe-${TRIPLE}"
            chmod +x "src-tauri/binaries/ffmpeg-${TRIPLE}" "src-tauri/binaries/ffprobe-${TRIPLE}"
            # Unsuffixed copies
            cp /opt/homebrew/bin/ffmpeg src-tauri/resources/ffmpeg
            cp /opt/homebrew/bin/ffprobe src-tauri/resources/ffprobe
            chmod +x src-tauri/resources/ffmpeg src-tauri/resources/ffprobe
          fi

          # gallery-dl built by pyinstaller
          mv dist/gallery-dl "src-tauri/binaries/gallery-dl-${TRIPLE}"
          chmod +x "src-tauri/binaries/gallery-dl-${TRIPLE}"

      - name: Prepare sidecars (Windows)
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          $triple = '${{ steps.triple.outputs.triple }}'
          New-Item -Force -ItemType Directory -Path src-tauri\binaries | Out-Null
          New-Item -Force -ItemType Directory -Path src-tauri\resources | Out-Null

          # yt-dlp
          curl.exe -L -o yt-dlp.exe https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe
          Move-Item yt-dlp.exe "src-tauri\binaries\yt-dlp-$triple.exe"

          # ffmpeg/ffprobe (yt-dlp FFmpeg-Builds)
          curl.exe -L -o ffmpeg.zip https://github.com/yt-dlp/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip
          tar -xf ffmpeg.zip
          $dir = Get-ChildItem -Directory -Filter "ffmpeg-*win64-gpl" | Select-Object -First 1
          Copy-Item "$($dir.FullName)\bin\ffmpeg.exe" "src-tauri\binaries\ffmpeg-$triple.exe"
          Copy-Item "$($dir.FullName)\bin\ffprobe.exe" "src-tauri\binaries\ffprobe-$triple.exe"
          # Unsuffixed copies so yt-dlp auto-detects without flags
          Copy-Item "$($dir.FullName)\bin\ffmpeg.exe" "src-tauri\resources\ffmpeg.exe"
          Copy-Item "$($dir.FullName)\bin\ffprobe.exe" "src-tauri\resources\ffprobe.exe"

          # gallery-dl (built onefile)
          Move-Item dist\gallery-dl.exe "src-tauri\binaries\gallery-dl-$triple.exe"

      - name: Build (no release upload)
        uses: tauri-apps/tauri-action@v0.4.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: --ci
